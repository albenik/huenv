package generator_test

import (
	"bytes"
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/albenik/huenv/generator"
	"github.com/albenik/huenv/reflector"
	"github.com/albenik/huenv/unmarshal"
)

func TestGenerateConfigFuncSource(t *testing.T) {
	const expectedOutput = `// DO NOT EDIT! Code generated by github.com/albenik/huenv/cmd/huenv@undefined.

package testpkg

import (
	_u "github.com/albenik/huenv/unmarshal"
)

func (c *TestConfig) Envmap() map[string]*_u.Target {
	to := _u.NewTarget

	return map[string]*_u.Target{
		"ENV_ZZZ":              to(&c.Foo.Bar.Baz, new(_u.String), _u.Required()),
		"ENV_AAA":              to(&c.Foo.Aaa, new(_u.String), _u.RequireIf(&c.Foo.Bar.Baz, "zzz", new(_u.String))),
		"ENV_BOOL":             to(&c.Bool, new(_u.Bool), _u.Required()),
		"ENV_BOOL_DEP_B":       to(&c.BoolDepB, new(_u.Bool), _u.RequireIf(&c.Bool, "true", new(_u.Bool))),
		"ENV_STRING":           to(&c.String, new(_u.String), _u.Required()),
		"ENV_BOOL_DEP_S":       to(&c.BoolDepS, new(_u.Bool), _u.RequireIf(&c.String, "foo", new(_u.String))),
		"ENV_BOOL_OPT":         to(&c.BoolOpt, new(_u.Bool), _u.Optional()),
		"ENV_CCC":              to(&c.Ccc, new(_u.String), _u.RequireIf(&c.String, "foo", new(_u.String)).And(_u.Enum("foo", "bar", "baz"))),
		"ENV_VERY_LOOOOOOOONG": to(&c.URL, new(_u.URL), _u.Required()),
	}
}
`

	const (
		pkg               = "github.com/albenik/huenv/unmarshal"
		stringUnmarshaler = "String"
		boolUnmarshaler   = "Bool"
		urlUnmarshaler    = "URL"
	)

	buf := new(bytes.Buffer)
	err := new(generator.ConfigGenerator).Generate(buf, &reflector.Result{
		ConfigPkg:  "testpkg",
		ConfigType: "TestConfig",
		Packages: map[string]struct{}{
			"github.com/albenik/huenv/unmarshal": {},
		},
		Envs: map[string]*reflector.Target{
			"ENV_BOOL": {
				Field: &reflector.TargetField{
					Name: "Bool",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    boolUnmarshaler,
					},
				},
				Condition: reflector.ConditionRequired(true),
			},
			"ENV_BOOL_OPT": {
				Field: &reflector.TargetField{
					Name: "BoolOpt",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    boolUnmarshaler,
					},
				},
				Condition: reflector.ConditionRequired(false),
			},
			"ENV_BOOL_DEP_B": {
				Field: &reflector.TargetField{
					Name: "BoolDepB",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    boolUnmarshaler,
					},
				},
				Condition: &reflector.ConditionRequireIf{
					Target: &reflector.TargetField{
						Name: "Bool",
						Unmarshaler: unmarshal.UnmarshalerName{
							Package: pkg,
							Type:    boolUnmarshaler,
						},
					},
					ValueStr: "true",
				},
			},
			"ENV_BOOL_DEP_S": {
				Field: &reflector.TargetField{
					Name: "BoolDepS",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    boolUnmarshaler,
					},
				},
				Condition: &reflector.ConditionRequireIf{
					Target: &reflector.TargetField{
						Name: "String",
						Unmarshaler: unmarshal.UnmarshalerName{
							Package: pkg,
							Type:    stringUnmarshaler,
						},
					},
					ValueStr: "foo",
				},
			},
			"ENV_STRING": {
				Field: &reflector.TargetField{
					Name: "String",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    stringUnmarshaler,
					},
				},
				Condition: reflector.ConditionRequired(true),
			},
			"ENV_CCC": {
				Field: &reflector.TargetField{
					Name: "Ccc",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    stringUnmarshaler,
					},
				},
				Condition: &reflector.ConditionRequireIfCombined{
					First: &reflector.ConditionRequireIf{
						Target: &reflector.TargetField{
							Name: "String",
							Unmarshaler: unmarshal.UnmarshalerName{
								Package: pkg,
								Type:    stringUnmarshaler,
							},
						},
						ValueStr: "foo",
					},
					Second: reflector.ConditionEnum([]string{"foo", "bar", "baz"}),
				},
			},
			"ENV_VERY_LOOOOOOOONG": {
				Field: &reflector.TargetField{
					Name: "URL",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    urlUnmarshaler,
					},
				},
				Condition: reflector.ConditionRequired(true),
			},
			"ENV_AAA": {
				Field: &reflector.TargetField{
					Name: "Foo.Aaa",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    stringUnmarshaler,
					},
				},
				Condition: &reflector.ConditionRequireIf{
					Target: &reflector.TargetField{
						Name: "Foo.Bar.Baz",
						Unmarshaler: unmarshal.UnmarshalerName{
							Package: pkg,
							Type:    stringUnmarshaler,
						},
					},
					ValueStr: "zzz",
				},
			},
			"ENV_ZZZ": {
				Field: &reflector.TargetField{
					Name: "Foo.Bar.Baz",
					Unmarshaler: unmarshal.UnmarshalerName{
						Package: pkg,
						Type:    stringUnmarshaler,
					},
				},
				Condition: reflector.ConditionRequired(true),
			},
		},
	})
	if !assert.NoError(t, err) {
		fe := new(generator.CodegenError)
		if errors.As(err, &fe) {
			t.Log("\n" + fe.Details())
		}
		t.FailNow()
	}
	assert.Equal(t, expectedOutput, buf.String())
}
